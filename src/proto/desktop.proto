syntax = "proto3";

package desktop.v1;

option go_package="rpc/desktop/v1;desktop_v1";


// protoc --go_out=. --twirp_out=option_prefix=casbin:. rpc/system/v1/desktop.proto
// 云桌面管理相关接口
service Desktop {
    // 这里的行尾注释 casbin:foo 用于验证接口权限格式为module-object-action(主模块-对象-操作)
    //
     // List 获取列表
    rpc List(DesktopListReq) returns (DesktopListResp);
	// Add 添加
    rpc Add(DesktopAddReq) returns (DesktopAddResp);
////     Delete 删除
//    rpc Delete(DesktopDeleteReq) returns (DesktopDeleteResp);
//    // Patch 修改
//    rpc Patch(DesktopPatchReq) returns (DesktopPatchResp);

}


// 云桌面
message HowlinkDesktop {
    int64 id = 1;
    // 姓名
    string name = 2;
    // 创建者
    string creator = 3;
    // 注册数量
    int64 registered_count = 4;
    // 未注册数量
    int64 unregistered_count = 5;
    // 桌面类型
    DesktopType desktopType = 6;
    // 维护状态
    bool inMaintainMode = 7;
    // 创建时间
    int64 created = 8;
    // 电源状态
    bool Power = 9;
    // 云桌面状态
    DesktopState state = 10;
    // todo: 操作系统
    task task = 11;
}


enum TaskState {
    TaskPreparing = 0;
    TaskRunning = 1;
    TaskSuccess = 2;
    TaskFail = 3;
}

// task
message task {
    int64 id = 1;
    // 标题
    string title = 2;
    // 具体细节
    string detail = 3;
    // 开始时间
    int64 start_at = 4;
    // 结束时间
    int64 end_at = 5;
    // 进度
    int32 progress = 6;
    // 状态
    TaskState state = 7;
    // 步骤，可能没有
    repeated step steps = 8;
    // Todo: type

}

message step {
    // id
    int64 id = 1;
    // 任务id
    int64 task_id = 2;
    // 名称
    string name = 3;
    // 细节
    string detail = 4;
    // 开始时间
    int64 start_at = 5;
    // 结束时间
    int64 end_at = 6;
    // 进度
    int32 progress = 7;
    // 状态
    TaskState state = 8;
    //  进度权重
    int32 weight = 9;
}

enum DesktopState {
    DesktopCreating = 0; // 创建中
    DesktopSuccess = 1; // 成功
    DesktopFail = 2; // 失败
}


message DesktopListReq {
    // FIXME 请求字段必须写注释
    int32 page = 1;
	int32 size = 2;
    string dn = 3;
}

message DesktopListResp {
	// 响应码[机读]
    int32 code = 1;
    // 返回信息，人读
    string msg = 2;
    // 获取结果
    repeated HowlinkDesktop data = 3;
}




enum DesktopType {
    Random = 0; //随机桌面
    StaticDiscard = 1; //静态还原
    StaticStore = 2; // 静态不还原
}

message DesktopAddReq {
    // 模版id
    int64 template = 1;
    // 快照id
    int64 version = 2;

    // 名称
    string name = 3;
    // 所在ou
    string group = 4;

    // 名称格式
    enum NamingSchemeType {
        None = 0;
        Alphabetic = 1;
        Numeric = 2;
    }
    NamingSchemeType namingSchemeType = 5;
    string namingScheme = 6;

    // 桌面数量
    int64 count = 7;


    DesktopType desktopType = 8;

    // 托管资源名/路径 ?? 哪个好呢
    string hostingUnit = 9;
    string network = 10;

}

message DesktopAddResp {
	// 响应码[机读]
    int32 code = 1;
    // 返回信息，人读
    string msg = 2;
    // 获取结果
	int64 data = 3;
}

message DesktopDeleteReq {
    // id
	int64 id = 1;
}

message DesktopDeleteResp {
	// 响应码[机读]
    int32 code = 1;
    // 返回信息，人读
    string msg = 2;
    // 获取结果
	int64 data = 3;
}

message DesktopPatchReq {
    // FIXME
}

message DesktopPatchResp {
	// 响应码[机读]
    int32 code = 1;
    // 返回信息，人读
    string msg = 2;
}
